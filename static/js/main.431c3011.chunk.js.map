{"version":3,"sources":["Main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","props","state","data","totCases","newCases","totDeaths","newDeaths","current","bind","fetch","then","res","json","forEach","i","unshift","positive","death","console","log","length","push","setState","this","scale","displayData","id","onClick","map","idx","className","style","height","class","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.431c3011.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      totCases: [],\r\n      newCases: [],\r\n      totDeaths: [],\r\n      newDeaths: [],\r\n      current: ''\r\n    }\r\n    this.newCases = this.newCases.bind(this)\r\n    this.totCases = this.totCases.bind(this)\r\n    this.newDeaths = this.newDeaths.bind(this)\r\n    this.totDeaths = this.totDeaths.bind(this)\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://api.covidtracking.com/v1/us/daily.json')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        var data = json\r\n\r\n        var totCases = []\r\n        var newCases = []\r\n        var totDeaths = []\r\n        var newDeaths = []\r\n\r\n\r\n        data.forEach(i => {\r\n          totCases.unshift(i.positive)\r\n          totDeaths.unshift(i.death)\r\n        })\r\nconsole.log(totCases)\r\n        //cases and death arrays are same length so they'll be run together\r\n        for(let i = 1; i < totCases.length; i++){\r\n          newCases.push(totCases[i] - totCases[i - 1])\r\n          newDeaths.push(totDeaths[i] - totDeaths[i - 1])\r\n        }\r\n\r\n        this.setState({\r\n          data: data,\r\n          totCases: totCases,\r\n          newCases: newCases,\r\n          totDeaths: totDeaths,\r\n          newDeaths: newDeaths,\r\n          current: 'newCases'\r\n        })\r\n      })\r\n  }\r\n\r\n  newCases(){\r\n    this.setState({\r\n      current: 'newCases'\r\n    })\r\n  }\r\n\r\n  totCases(){\r\n    this.setState({\r\n      current: 'totCases'\r\n    })\r\n  }\r\n\r\n  newDeaths(){\r\n    this.setState({\r\n      current: 'newDeaths'\r\n    })\r\n  }\r\n\r\n  totDeaths(){\r\n    this.setState({\r\n      current: 'totDeaths'\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    var displayData = []\r\n    var scale\r\n\r\n    if(this.state.current === 'totCases'){\r\n      displayData = this.state.totCases\r\n      scale = 500000\r\n    } else if(this.state.current === 'newCases'){\r\n      displayData = this.state.newCases\r\n      scale = 5000\r\n    } else if(this.state.current === 'totDeaths'){\r\n      displayData = this.state.totDeaths\r\n      scale = 10000\r\n    } else if(this.state.current === 'newDeaths'){\r\n      displayData = this.state.newDeaths\r\n      scale = 100\r\n    }\r\n\r\n    return(\r\n      <div id='main'>\r\n      <button onClick={this.newCases}>Daily Cases</button>\r\n      <button onClick={this.totCases}>Total Cases</button>\r\n      <button onClick={this.newDeaths}>Daily Deaths</button>\r\n      <button onClick={this.totDeaths}>Total Deaths</button>\r\n      <div id='bars'>\r\n        {\r\n          displayData.map((i,idx) => {\r\n            return(\r\n              <div\r\n                className=\"bar\"\r\n                style={{\r\n                    height: `${i/scale}vh`\r\n                  }}/>\r\n          )\r\n          })\r\n        }\r\n        </div>\r\n        <div id='x-axis'/>\r\n        <div className='tickx' id='tickx1'/>\r\n        <p class='date' id='date1'>Feb 2020</p>\r\n        <div className='tickx' id='tickx2'/>\r\n        <p class='date' id='date2'>Apr 2020</p>\r\n        <div className='tickx' id='tickx3'/>\r\n        <p class='date' id='date3'>Jun 2020</p>\r\n        <div className='tickx' id='tickx4'/>\r\n        <p class='date' id='date4'>Aug 2020</p>\r\n        <div className='tickx' id='tickx5'/>\r\n        <p class='date' id='date5'>Oct 2020</p>\r\n        <div className='tickx' id='tickx6'/>\r\n        <p class='date' id='date6'>Dec 2020</p>\r\n        <div className='tickx' id='tickx7'/>\r\n        <p class='date' id='date7'>Feb 2021</p>\r\n        <div className='tickx' id='tickx8'/>\r\n        <p class='date' id='date8'>Apr 2021</p>\r\n        <div id='y-axis'/>\r\n        <div className='ticky' id='ticky1'/>\r\n        <p class='count' id='count1'>{10*scale}</p>\r\n        <div className='ticky' id='ticky2'/>\r\n        <p class='count' id='count2'>{20*scale}</p>\r\n        <div className='ticky' id='ticky3'/>\r\n        <p class='count' id='count3'>{30*scale}</p>\r\n        <div className='ticky' id='ticky4'/>\r\n        <p class='count' id='count4'>{40*scale}</p>\r\n        <div className='ticky' id='ticky5'/>\r\n        <p class='count' id='count5'>{50*scale}</p>\r\n        <div className='ticky' id='ticky6'/>\r\n        <p class='count' id='count6'>{60*scale}</p>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Main from './Main'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}